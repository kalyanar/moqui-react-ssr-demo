{"version":3,"sources":["webpack:///./src/routes/Counter/modules/counter.js","webpack:///./src/routes/Counter/containers/CounterContainer.js","webpack:///./src/routes/Counter/components/Counter.js","webpack:///./~/babel-runtime/helpers/defineProperty.js"],"names":["increment","counterReducer","COUNTER_INCREMENT","value","type","payload","doubleAsync","dispatch","getState","resolve","setTimeout","counter","actions","ACTION_HANDLERS","state","action","initialState","handler","mapDispatchToProps","mapStateToProps","Counter","margin","props","store","params","Component","propTypes","PropTypes","number","isRequired","func"],"mappings":"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","file":"1.counter.3d8415467c58374baea0.js","sourcesContent":["// ------------------------------------\n// Constants\n// ------------------------------------\nexport const COUNTER_INCREMENT = 'COUNTER_INCREMENT'\n\n// ------------------------------------\n// Actions\n// ------------------------------------\nexport function increment (value = 1) {\n  return {\n    type    : COUNTER_INCREMENT,\n    payload : value\n  }\n}\n\n/*  This is a thunk, meaning it is a function that immediately\n    returns a function for lazy evaluation. It is incredibly useful for\n    creating async actions, especially when combined with redux-thunk!\n\n    NOTE: This is solely for demonstration purposes. In a real application,\n    you'd probably want to dispatch an action of COUNTER_DOUBLE and let the\n    reducer take care of this logic.  */\n\nexport const doubleAsync = () => {\n  return (dispatch, getState) => {\n    return new Promise((resolve) => {\n      setTimeout(() => {\n        dispatch(increment(getState().counter))\n        resolve()\n      }, 200)\n    })\n  }\n}\n\nexport const actions = {\n  increment,\n  doubleAsync\n}\n\n// ------------------------------------\n// Action Handlers\n// ------------------------------------\nconst ACTION_HANDLERS = {\n  [COUNTER_INCREMENT] : (state, action) => state + action.payload\n}\n\n// ------------------------------------\n// Reducer\n// ------------------------------------\nconst initialState = 0\nexport default function counterReducer (state = initialState, action) {\n  const handler = ACTION_HANDLERS[action.type]\n\n  return handler ? handler(state, action) : state\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/routes/Counter/modules/counter.js","import { connect } from 'react-redux'\nimport { increment, doubleAsync } from '../modules/counter'\n\n/*  This is a container component. Notice it does not contain any JSX,\n    nor does it import React. This component is **only** responsible for\n    wiring in the actions and state necessary to render a presentational\n    component - in this case, the counter:   */\n\nimport Counter from '../components/Counter'\n\n/*  Object of action creators (can also be function that returns object).\n    Keys will be passed as props to presentational components. Here we are\n    implementing our wrapper around increment; the component doesn't care   */\n\nconst mapDispatchToProps = {\n  increment : () => increment(1),\n  doubleAsync\n}\n\nconst mapStateToProps = (state) => ({\n  counter : state.counter\n})\n\n/*  Note: mapStateToProps is where you should use `reselect` to create selectors, ie:\n\n    import { createSelector } from 'reselect'\n    const counter = (state) => state.counter\n    const tripleCount = createSelector(counter, (count) => count * 3)\n    const mapStateToProps = (state) => ({\n      counter: tripleCount(state)\n    })\n\n    Selectors can compute derived data, allowing Redux to store the minimal possible state.\n    Selectors are efficient. A selector is not recomputed unless one of its arguments change.\n    Selectors are composable. They can be used as input to other selectors.\n    https://github.com/reactjs/reselect    */\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Counter)\n\n\n\n// WEBPACK FOOTER //\n// ./src/routes/Counter/containers/CounterContainer.js","import React from 'react'\nimport 'whatwg-fetch'\n\nclass Counter extends React.Component {\n  static loadData (store, params) {\n//     return fetch('http://httpbin.org/ip')\n//       .then(response => {\n//         store.dispatch({\n//           type    : 'COUNTER_INCREMENT',\n//           payload : 5\n//         })\n//       })\n    return new Promise(resolve => {\n      store.dispatch({\n        type    : 'COUNTER_INCREMENT',\n        payload : 5\n      })\n      resolve('aa')\n    })\n  }\n\n  render () {\n    return (\n      <div style={{ margin: '0 auto' }}>\n        <h2>Counter: {this.props.counter}</h2>\n        <button className='btn btn-default' onClick={this.props.increment}>\n          Increment\n        </button>\n        {' '}\n        <button className='btn btn-default' onClick={this.props.doubleAsync}>\n          Double (Async)\n        </button>\n      </div>\n    )\n  }\n}\n\nCounter.propTypes = {\n  counter     : React.PropTypes.number.isRequired,\n  doubleAsync : React.PropTypes.func.isRequired,\n  increment   : React.PropTypes.func.isRequired\n}\n\nexport default Counter\n\n\n\n// WEBPACK FOOTER //\n// ./src/routes/Counter/components/Counter.js","\"use strict\";\n\nexports.__esModule = true;\n\nvar _defineProperty = require(\"../core-js/object/define-property\");\n\nvar _defineProperty2 = _interopRequireDefault(_defineProperty);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = function (obj, key, value) {\n  if (key in obj) {\n    (0, _defineProperty2.default)(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/babel-runtime/helpers/defineProperty.js\n// module id = 1066\n// module chunks = 1"],"sourceRoot":""}